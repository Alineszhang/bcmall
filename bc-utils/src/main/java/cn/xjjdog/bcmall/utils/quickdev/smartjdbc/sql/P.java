
// line 1 "P.rl"
package cn.xjjdog.bcmall.utils.quickdev.smartjdbc.sql;

// Do not edit this file! Generated by Ragel.
// ragel -G2 -J -o P.java P.rl

import java.util.ArrayList;
import java.util.List;

/**
 * 编译，并根据我们的自定义修改SQL
 */
class P {


    static class Condition {
        /**
         * 保持
         */
        String text;
    }

    static boolean debug = true;


    public static List<Pair> p(String sql){
        List<Pair>  pairs = new ArrayList<>();
        String namedParams = "";
        String quote = "";

        char[] data = sql.toCharArray();
        int cs, p = 0 , pe = sql.length(), eof = pe;
        int pairStart = 0;
        int pairEnd = 0;
        int namedStart = 0;

        
// line 40 "P.java"
	{
	cs = sqlp_start;
	}

// line 45 "P.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _sqlp_key_offsets[cs];
	_trans = _sqlp_index_offsets[cs];
	_klen = _sqlp_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _sqlp_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _sqlp_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _sqlp_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _sqlp_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _sqlp_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	cs = _sqlp_trans_targs[_trans];

	if ( _sqlp_trans_actions[_trans] != 0 ) {
		_acts = _sqlp_trans_actions[_trans];
		_nacts = (int) _sqlp_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _sqlp_actions[_acts++] )
			{
	case 0:
// line 39 "P.rl"
	{
            namedStart = p;
        }
	break;
	case 1:
// line 43 "P.rl"
	{
            pairEnd = p;
        }
	break;
	case 2:
// line 52 "P.rl"
	{
            pairStart = p;
        }
	break;
	case 3:
// line 55 "P.rl"
	{
            namedParams = new String(data,namedStart,pairEnd-namedStart);
            quote = new String(data,pairStart,p-pairStart) ;
            Pair pair = new Pair();
            pair.quote = quote;
            pair.namedParams = namedParams;
            pairs.add(pair);

            if(debug){ System.out.println(quote); }

            namedParams = null;
            quote = null;

        }
	break;
// line 155 "P.java"
			}
		}
	}

case 2:
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _sqlp_eof_actions[cs];
	int __nacts = (int) _sqlp_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _sqlp_actions[__acts++] ) {
	case 3:
// line 55 "P.rl"
	{
            namedParams = new String(data,namedStart,pairEnd-namedStart);
            quote = new String(data,pairStart,p-pairStart) ;
            Pair pair = new Pair();
            pair.quote = quote;
            pair.namedParams = namedParams;
            pairs.add(pair);

            if(debug){ System.out.println(quote); }

            namedParams = null;
            quote = null;

        }
	break;
// line 189 "P.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 91 "P.rl"


        return pairs;
    }

    
// line 206 "P.java"
private static byte[] init__sqlp_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    2,    0,    1,
	    2,    0,    3,    2,    2,    1,    2,    2,    3
	};
}

private static final byte _sqlp_actions[] = init__sqlp_actions_0();


private static byte[] init__sqlp_key_offsets_0()
{
	return new byte [] {
	    0,    1,    3,    5,   13,   22,   25,   34,   37,   40,   49
	};
}

private static final byte _sqlp_key_offsets[] = init__sqlp_key_offsets_0();


private static char[] init__sqlp_trans_keys_0()
{
	return new char [] {
	   35,   35,  123,   35,   58,   35,   58,   48,   57,   65,   90,   97,
	  122,   35,   58,  125,   48,   57,   65,   90,   97,  122,   35,   58,
	  125,   35,   58,  125,   48,   57,   65,   90,   97,  122,   35,   58,
	  125,   35,   58,  125,   35,   58,  125,   48,   57,   65,   90,   97,
	  122,   35,   58,  125,   48,   57,   65,   90,   97,  122,    0
	};
}

private static final char _sqlp_trans_keys[] = init__sqlp_trans_keys_0();


private static byte[] init__sqlp_single_lengths_0()
{
	return new byte [] {
	    1,    2,    2,    2,    3,    3,    3,    3,    3,    3,    3
	};
}

private static final byte _sqlp_single_lengths[] = init__sqlp_single_lengths_0();


private static byte[] init__sqlp_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    3,    3,    0,    3,    0,    0,    3,    3
	};
}

private static final byte _sqlp_range_lengths[] = init__sqlp_range_lengths_0();


private static byte[] init__sqlp_index_offsets_0()
{
	return new byte [] {
	    0,    2,    5,    8,   14,   21,   25,   32,   36,   40,   47
	};
}

private static final byte _sqlp_index_offsets[] = init__sqlp_index_offsets_0();


private static byte[] init__sqlp_trans_targs_0()
{
	return new byte [] {
	    1,    0,    1,    2,    0,    2,    3,    2,    2,    3,    4,    4,
	    4,    2,    5,    6,    7,    4,    4,    4,    5,    5,    6,    7,
	    5,    5,    6,    7,    4,    4,    4,    5,    8,    9,    7,    8,
	    8,    9,    7,    8,    8,    9,    7,   10,   10,   10,    8,    8,
	    9,    7,   10,   10,   10,    8,    0
	};
}

private static final byte _sqlp_trans_targs[] = init__sqlp_trans_targs_0();


private static byte[] init__sqlp_trans_actions_0()
{
	return new byte [] {
	    5,    0,    5,    0,    0,    5,    1,    0,    5,    1,    0,    0,
	    0,    0,   15,    9,    3,    3,    3,    3,    3,    5,    1,    0,
	    0,    5,    1,    0,    0,    0,    0,    0,   18,   12,    7,    7,
	    5,    1,    0,    0,    5,    1,    0,    0,    0,    0,    0,   15,
	    9,    3,    3,    3,    3,    3,    0
	};
}

private static final byte _sqlp_trans_actions[] = init__sqlp_trans_actions_0();


private static byte[] init__sqlp_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    7,    0,    0,    0
	};
}

private static final byte _sqlp_eof_actions[] = init__sqlp_eof_actions_0();


static final int sqlp_start = 0;
static final int sqlp_first_final = 7;
static final int sqlp_error = -1;

static final int sqlp_en_main = 0;


// line 97 "P.rl"

}
